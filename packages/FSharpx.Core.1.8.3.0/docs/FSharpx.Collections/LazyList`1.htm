<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <title>LazyList&lt;T&gt; - FSharpx Documentation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
    <link type="text/css" rel="stylesheet" href="../main.css"/>
    <script type="text/javascript" src="../js/jquery-1.3.2.min.js"></script>
    <script type="text/javascript" src="../js/jquery.scrollTo-min.js"></script>
    <script type="text/javascript" src="../js/navigation.js"></script>
    <script type="text/javascript" src="../js/example.js"></script>
  </head>
  <body><div id="namespaces">
	<h2 class="fixed">Namespaces</h2>
	<div class="scroll">
		<ul>
			<li>
          <a href="../FSharp.Control/index.htm">FSharp.Control</a>
      </li>
			<li>
          <a href="../FSharp.IO/index.htm">FSharp.IO</a>
      </li>
			<li>
          <a href="../FSharpx/index.htm">FSharpx</a>
      </li>
			<li>
          <a href="../FSharpx.Collections/index.htm" class="current">FSharpx.Collections</a>
      </li>
			<li>
          <a href="../FSharpx.Collections.Mutable/index.htm">FSharpx.Collections.Mutable</a>
      </li>
			<li>
          <a href="../FSharpx.Core/index.htm">FSharpx.Core</a>
      </li>
			<li>
          <a href="../FSharpx.DataStructures/index.htm">FSharpx.DataStructures</a>
      </li>
			<li>
          <a href="../FSharpx.Linq/index.htm">FSharpx.Linq</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Collections/index.htm">Microsoft.FSharp.Collections</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Control/index.htm">Microsoft.FSharp.Control</a>
      </li>
		</ul>
	</div>
</div><div id="types">
  <h2 class="fixed">Types in FSharpx.Collections</h2>
	<div class="scroll">
		<ul>
				<li>
            <a href="../FSharpx.Collections/ArrayModule.htm">ArrayModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/ByteString.htm">ByteString</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/ByteStringModule.htm">ByteStringModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/Deque`1.htm">Deque&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/DequeModule.htm">DequeModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/DictionaryModule.htm">DictionaryModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/DList`1.htm">DList&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/DListModule.htm">DListModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/Heap`1.htm">Heap&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/HeapModule.htm">HeapModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/IPriorityQueue.htm">IPriorityQueue</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/IPriorityQueue`1.htm">IPriorityQueue`1</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/LazyList`1.htm" class="current">LazyList&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/LazyListModule.htm">LazyListModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/List.htm">List</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/Map.htm">Map</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/NameValueCollectionModule.htm">NameValueCollectionModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/NonEmptyList.htm">NonEmptyList</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/NonEmptyList`1.htm">NonEmptyList&lt;a&gt;</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/NonEmptyListSemigroup`1.htm">NonEmptyListSemigroup`1</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/PriorityQueue.htm">PriorityQueue</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/Queue`1.htm">Queue&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/QueueModule.htm">QueueModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/RandomAccessList`1.htm">RandomAccessList&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/RandomAccessListModule.htm">RandomAccessListModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/Seq.htm">Seq</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/Set.htm">Set</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/Vector`1.htm">Vector&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/VectorModule.htm">VectorModule</a>
        </li>
		</ul>
	</div>
</div>
    <div class="header">
		<p class="class"><strong>Type</strong> LazyList&lt;T&gt;</p>
		<p><strong>Namespace</strong> FSharpx.Collections</p>
		<p><strong>Interfaces</strong> <span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></p>
	</div>
    <div class="sub-header">
			<div id="summary">LazyLists are possibly-infinite, cached sequences.  See also IEnumerable/Seq for
uncached sequences. LazyLists normally involve delayed computations without
side-effects.  The results of these computations are cached and evaluations will be
performed only once for each element of the lazy list.  In contrast, for sequences
(IEnumerable) recomputation happens each time an enumerator is created and the sequence
traversed.
LazyLists can represent cached, potentially-infinite computations.  Because they are
cached they may cause memory leaks if some active code or data structure maintains a
live reference to the head of an infinite or very large lazy list while iterating it,
or if a reference is maintained after the list is no longer required.
Lazy lists may be matched using the LazyList.Cons and LazyList.Nil active patterns.
These may force the computation of elements of the list. 
			</div>
		
		
			<h3 class="section">Methods</h3>
			<ul>
				<li><a href="../FSharpx.Collections/LazyList`1.htm#Length">Length</a></li>
			</ul>
		
			<h3 class="section">Properties</h3>
			<ul>
				<li><a href="../FSharpx.Collections/LazyList`1.htm#Head">Head</a></li>
				<li><a href="../FSharpx.Collections/LazyList`1.htm#IsEmpty">IsEmpty</a></li>
				<li><a href="../FSharpx.Collections/LazyList`1.htm#Tail">Tail</a></li>
				<li><a href="../FSharpx.Collections/LazyList`1.htm#TryHead">TryHead</a></li>
				<li><a href="../FSharpx.Collections/LazyList`1.htm#TryTail">TryTail</a></li>
				<li><a href="../FSharpx.Collections/LazyList`1.htm#TryUncons">TryUncons</a></li>
				<li><a href="../FSharpx.Collections/LazyList`1.htm#Uncons">Uncons</a></li>
			</ul>
		
	</div>
	
	
	<h3 class="section">Public instance methods</h3>
	
	<div id="Length" class="method">
		<h4><span title="System.int">int</span> <strong>Length</strong>()</h4>
		<div class="content">O(n). Return the length of the list 



      
    </div>
	</div>
	
	
  <h3 class="section">Public properties</h3>

  <div id="Head" class="method">
    <h4><span title="FSharpx.Collections.T">T</span> <strong>Head</strong> get; </h4>
    <div class="content">O(1). Return the first element of the list.  Forces the evaluation of
the first cell of the list if it is not already evaluated. 
      
    </div>
  </div>
  <div id="IsEmpty" class="method">
    <h4><span title="System.bool">bool</span> <strong>IsEmpty</strong> get; </h4>
    <div class="content">O(1). Test if a list is empty.  Forces the evaluation of
the first element of the stream if it is not already evaluated. 
      
    </div>
  </div>
  <div id="Tail" class="method">
    <h4><a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>Tail</strong> get; </h4>
    <div class="content">O(1). Return the list corresponding to the remaining items in the sequence.
Forces the evaluation of the first cell of the list if it is not already evaluated. 
      
    </div>
  </div>
  <div id="TryHead" class="method">
    <h4><span title="Microsoft.FSharp.Core.FSharpOption<T>">FSharpOption&lt;T&gt;</span> <strong>TryHead</strong> get; </h4>
    <div class="content">O(1). Return option the first element of the list.  Forces the evaluation of
the first cell of the list if it is not already evaluated. 
      
    </div>
  </div>
  <div id="TryTail" class="method">
    <h4><span title="Microsoft.FSharp.Core.FSharpOption<LazyList<T>>">FSharpOption&lt;LazyList&lt;T&gt;&gt;</span> <strong>TryTail</strong> get; </h4>
    <div class="content">O(1). Return option the list corresponding to the remaining items in the sequence.
Forces the evaluation of the first cell of the list if it is not already evaluated. 
      
    </div>
  </div>
  <div id="TryUncons" class="method">
    <h4><span title="Microsoft.FSharp.Core.FSharpOption<Tuple<T, LazyList<T>>>">FSharpOption&lt;Tuple&lt;T, LazyList&lt;T&gt;&gt;&gt;</span> <strong>TryUncons</strong> get; </h4>
    <div class="content">O(1). Returns option tuple of head element and tail of the list. 
      
    </div>
  </div>
  <div id="Uncons" class="method">
    <h4><span title="System.Tuple<T, LazyList<T>>">Tuple&lt;T, LazyList&lt;T&gt;&gt;</span> <strong>Uncons</strong> get; </h4>
    <div class="content">O(1). Returns tuple of head element and tail of the list. 
      
    </div>
  </div>
	<div id="footer">
  <p>Based on v1.8.3.0 of FSharpx</p>
  <p>Generated by <a href="http://docu.jagregory.com">docu</a></p>
</div>
  </body>
</html>