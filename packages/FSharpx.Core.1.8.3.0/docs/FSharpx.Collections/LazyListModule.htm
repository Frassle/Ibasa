<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <title>LazyListModule - FSharpx Documentation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
    <link type="text/css" rel="stylesheet" href="../main.css"/>
    <script type="text/javascript" src="../js/jquery-1.3.2.min.js"></script>
    <script type="text/javascript" src="../js/jquery.scrollTo-min.js"></script>
    <script type="text/javascript" src="../js/navigation.js"></script>
    <script type="text/javascript" src="../js/example.js"></script>
  </head>
  <body><div id="namespaces">
	<h2 class="fixed">Namespaces</h2>
	<div class="scroll">
		<ul>
			<li>
          <a href="../FSharp.Control/index.htm">FSharp.Control</a>
      </li>
			<li>
          <a href="../FSharp.IO/index.htm">FSharp.IO</a>
      </li>
			<li>
          <a href="../FSharpx/index.htm">FSharpx</a>
      </li>
			<li>
          <a href="../FSharpx.Collections/index.htm" class="current">FSharpx.Collections</a>
      </li>
			<li>
          <a href="../FSharpx.Collections.Mutable/index.htm">FSharpx.Collections.Mutable</a>
      </li>
			<li>
          <a href="../FSharpx.Core/index.htm">FSharpx.Core</a>
      </li>
			<li>
          <a href="../FSharpx.DataStructures/index.htm">FSharpx.DataStructures</a>
      </li>
			<li>
          <a href="../FSharpx.Linq/index.htm">FSharpx.Linq</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Collections/index.htm">Microsoft.FSharp.Collections</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Control/index.htm">Microsoft.FSharp.Control</a>
      </li>
		</ul>
	</div>
</div><div id="types">
  <h2 class="fixed">Types in FSharpx.Collections</h2>
	<div class="scroll">
		<ul>
				<li>
            <a href="../FSharpx.Collections/ArrayModule.htm">ArrayModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/ByteString.htm">ByteString</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/ByteStringModule.htm">ByteStringModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/Deque`1.htm">Deque&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/DequeModule.htm">DequeModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/DictionaryModule.htm">DictionaryModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/DList`1.htm">DList&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/DListModule.htm">DListModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/Heap`1.htm">Heap&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/HeapModule.htm">HeapModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/IPriorityQueue.htm">IPriorityQueue</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/IPriorityQueue`1.htm">IPriorityQueue`1</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/LazyListModule.htm" class="current">LazyListModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/List.htm">List</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/Map.htm">Map</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/NameValueCollectionModule.htm">NameValueCollectionModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/NonEmptyList.htm">NonEmptyList</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/NonEmptyList`1.htm">NonEmptyList&lt;a&gt;</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/NonEmptyListSemigroup`1.htm">NonEmptyListSemigroup`1</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/PriorityQueue.htm">PriorityQueue</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/Queue`1.htm">Queue&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/QueueModule.htm">QueueModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/RandomAccessList`1.htm">RandomAccessList&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/RandomAccessListModule.htm">RandomAccessListModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/Seq.htm">Seq</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/Set.htm">Set</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/Vector`1.htm">Vector&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/VectorModule.htm">VectorModule</a>
        </li>
		</ul>
	</div>
</div>
    <div class="header">
		<p class="class"><strong>Type</strong> LazyListModule</p>
		<p><strong>Namespace</strong> FSharpx.Collections</p>
	</div>
    <div class="sub-header">
		
		
			<h3 class="section">Methods</h3>
			<ul>
				<li><a href="../FSharpx.Collections/LazyListModule.htm#append``1">append&lt;T&gt;</a></li>
				<li><a href="../FSharpx.Collections/LazyListModule.htm#concat``1">concat&lt;T&gt;</a></li>
				<li><a href="../FSharpx.Collections/LazyListModule.htm#cons``1">cons&lt;T&gt;</a></li>
				<li><a href="../FSharpx.Collections/LazyListModule.htm#consDelayed``1">consDelayed&lt;T&gt;</a></li>
				<li><a href="../FSharpx.Collections/LazyListModule.htm#delayed``1">delayed&lt;T&gt;</a></li>
				<li><a href="../FSharpx.Collections/LazyListModule.htm#filter``1">filter&lt;T&gt;</a></li>
				<li><a href="../FSharpx.Collections/LazyListModule.htm#find``1">find&lt;T&gt;</a></li>
				<li><a href="../FSharpx.Collections/LazyListModule.htm#head``1">head&lt;T&gt;</a></li>
				<li><a href="../FSharpx.Collections/LazyListModule.htm#isEmpty``1">isEmpty&lt;T&gt;</a></li>
				<li><a href="../FSharpx.Collections/LazyListModule.htm#iter``1">iter&lt;T&gt;</a></li>
				<li><a href="../FSharpx.Collections/LazyListModule.htm#length``1">length&lt;T&gt;</a></li>
				<li><a href="../FSharpx.Collections/LazyListModule.htm#map``2">map&lt;T, U&gt;</a></li>
				<li><a href="../FSharpx.Collections/LazyListModule.htm#map2``3">map2&lt;T1, T2, U&gt;</a></li>
				<li><a href="../FSharpx.Collections/LazyListModule.htm#mapAccum``3">mapAccum&lt;T1, T2, T3&gt;</a></li>
				<li><a href="../FSharpx.Collections/LazyListModule.htm#ofArray``1">ofArray&lt;T&gt;</a></li>
				<li><a href="../FSharpx.Collections/LazyListModule.htm#scan``2">scan&lt;State, T&gt;</a></li>
				<li><a href="../FSharpx.Collections/LazyListModule.htm#skip``1">skip&lt;T&gt;</a></li>
				<li><a href="../FSharpx.Collections/LazyListModule.htm#tail``1">tail&lt;T&gt;</a></li>
				<li><a href="../FSharpx.Collections/LazyListModule.htm#take``1">take&lt;T&gt;</a></li>
				<li><a href="../FSharpx.Collections/LazyListModule.htm#toArray``1">toArray&lt;T&gt;</a></li>
				<li><a href="../FSharpx.Collections/LazyListModule.htm#toList``1">toList&lt;T&gt;</a></li>
				<li><a href="../FSharpx.Collections/LazyListModule.htm#toSeq``1">toSeq&lt;T&gt;</a></li>
				<li><a href="../FSharpx.Collections/LazyListModule.htm#tryFind``1">tryFind&lt;T&gt;</a></li>
				<li><a href="../FSharpx.Collections/LazyListModule.htm#tryHead``1">tryHead&lt;T&gt;</a></li>
				<li><a href="../FSharpx.Collections/LazyListModule.htm#trySkip``1">trySkip&lt;T&gt;</a></li>
				<li><a href="../FSharpx.Collections/LazyListModule.htm#tryTail``1">tryTail&lt;T&gt;</a></li>
				<li><a href="../FSharpx.Collections/LazyListModule.htm#tryTake``1">tryTake&lt;T&gt;</a></li>
				<li><a href="../FSharpx.Collections/LazyListModule.htm#tryUncons``1">tryUncons&lt;T&gt;</a></li>
				<li><a href="../FSharpx.Collections/LazyListModule.htm#uncons``1">uncons&lt;T&gt;</a></li>
				<li><a href="../FSharpx.Collections/LazyListModule.htm#zip``2">zip&lt;T1, T2&gt;</a></li>
			</ul>
		
		
	</div>
	
	
	
	<h3 class="section">Public static methods</h3>
	
	<div id="append``1" class="method">
		<h4><a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>append&lt;T&gt;</strong>(<a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> l1, <a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> source)</h4>
		<div class="content">O(1). Return the list which contains on demand the elements of the first list followed
by the elements of the second list 



      
    </div>
	</div>
	<div id="concat``1" class="method">
		<h4><a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>concat&lt;T&gt;</strong>(<a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> s1)</h4>
		<div class="content">O(1). Return the list which contains on demand the list of elements of the list of lazy lists. 



      
    </div>
	</div>
	<div id="cons``1" class="method">
		<h4><a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>cons&lt;T&gt;</strong>(<span title="FSharpx.Collections.T">T</span> x, <a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> l)</h4>
		<div class="content">O(1). Return a new list which contains the given item followed by the
given list. 



      
    </div>
	</div>
	<div id="consDelayed``1" class="method">
		<h4><a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>consDelayed&lt;T&gt;</strong>(<span title="FSharpx.Collections.T">T</span> x, <span title="Microsoft.FSharp.Core.FSharpFunc<Unit, LazyList<T>>">FSharpFunc&lt;Unit, LazyList&lt;T&gt;&gt;</span> l)</h4>
		<div class="content">O(1). Return a new list which on consumption contains the given item
followed by the list returned by the given computation.  The 



      
    </div>
	</div>
	<div id="delayed``1" class="method">
		<h4><a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>delayed&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<Unit, LazyList<T>>">FSharpFunc&lt;Unit, LazyList&lt;T&gt;&gt;</span> f)</h4>
		<div class="content">O(1). Return a list that is in effect the list returned by the given computation.
The given computation is not executed until the first element on the list is
consumed. 



      
    </div>
	</div>
	<div id="filter``1" class="method">
		<h4><a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>filter&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<T, bool>">FSharpFunc&lt;T, bool&gt;</span> predicate, <a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> source)</h4>
		<div class="content">O(1). Return a new collection which on consumption will consist of only the elements of the collection
for which the given predicate returns "true" 



      
    </div>
	</div>
	<div id="find``1" class="method">
		<h4><span title="FSharpx.Collections.T">T</span> <strong>find&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<T, bool>">FSharpFunc&lt;T, bool&gt;</span> predicate, <a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> source)</h4>
		<div class="content">O(n), worst case. Return the first element for which the given function returns <c>true</c>.
Raise <c>KeyNotFoundException</c> if no such element exists. 



      
    </div>
	</div>
	<div id="head``1" class="method">
		<h4><span title="FSharpx.Collections.T">T</span> <strong>head&lt;T&gt;</strong>(<a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> s)</h4>
		<div class="content">O(1). Return the first element of the list.  Forces the evaluation of
the first cell of the list if it is not already evaluated. 



      
    </div>
	</div>
	<div id="isEmpty``1" class="method">
		<h4><span title="System.bool">bool</span> <strong>isEmpty&lt;T&gt;</strong>(<a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> s)</h4>
		<div class="content">O(1). Test if a list is empty.  Forces the evaluation of
the first element of the stream if it is not already evaluated. 



      
    </div>
	</div>
	<div id="iter``1" class="method">
		<h4><span title="System.void">void</span> <strong>iter&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<T, Unit>">FSharpFunc&lt;T, Unit&gt;</span> action, <a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> list)</h4>
		<div class="content">O(n). Apply the given function to each element of the collection. 



      
    </div>
	</div>
	<div id="length``1" class="method">
		<h4><span title="System.int">int</span> <strong>length&lt;T&gt;</strong>(<a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> list)</h4>
		<div class="content">O(n). Return the length of the list 



      
    </div>
	</div>
	<div id="map``2" class="method">
		<h4><a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>map&lt;T, U&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<T, U>">FSharpFunc&lt;T, U&gt;</span> mapping, <a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> source)</h4>
		<div class="content">O(1). Build a new collection whose elements are the results of applying the given function
to each of the elements of the collection. 



      
    </div>
	</div>
	<div id="map2``3" class="method">
		<h4><a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>map2&lt;T1, T2, U&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<T1, FSharpFunc<T2, U>>">FSharpFunc&lt;T1, FSharpFunc&lt;T2, U&gt;&gt;</span> mapping, <a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> s1, <a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> s2)</h4>
		<div class="content">O(1). Build a new collection whose elements are the results of applying the given function
to the corresponding elements of the two collections pairwise. 



      
    </div>
	</div>
	<div id="mapAccum``3" class="method">
		<h4><span title="System.Tuple<T1, LazyList<T3>>">Tuple&lt;T1, LazyList&lt;T3&gt;&gt;</span> <strong>mapAccum&lt;T1, T2, T3&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<T1, FSharpFunc<T2, Tuple<T1, T3>>>">FSharpFunc&lt;T1, FSharpFunc&lt;T2, Tuple&lt;T1, T3&gt;&gt;&gt;</span> f, <span title="FSharpx.Collections.T1">T1</span> s, <a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> l)</h4>
		<div class="content">O(n). Behaves like a combination of map and fold;
it applies a function to each element of a list,
passing an accumulating parameter from left to right,
and returning a final value of this accumulator together with the new list. 



      
    </div>
	</div>
	<div id="ofArray``1" class="method">
		<h4><a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>ofArray&lt;T&gt;</strong>(<span title="FSharpx.Collections.T[]">T[]</span> a)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="scan``2" class="method">
		<h4><a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>scan&lt;State, T&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<State, FSharpFunc<T, State>>">FSharpFunc&lt;State, FSharpFunc&lt;T, State&gt;&gt;</span> folder, <span title="FSharpx.Collections.State">State</span> acc, <a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> source)</h4>
		<div class="content">O(1). Return a new list consisting of the results of applying the given accumulating function
to successive elements of the list 



      
    </div>
	</div>
	<div id="skip``1" class="method">
		<h4><a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>skip&lt;T&gt;</strong>(<span title="System.int">int</span> count, <a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> source)</h4>
		<div class="content">O(n), where n is count. Return the list which on consumption will skip the first 'n' elements of
the input list. 



      
    </div>
	</div>
	<div id="tail``1" class="method">
		<h4><a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>tail&lt;T&gt;</strong>(<a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> s)</h4>
		<div class="content">O(1). Return the list corresponding to the remaining items in the sequence.
Forces the evaluation of the first cell of the list if it is not already evaluated. 



      
    </div>
	</div>
	<div id="take``1" class="method">
		<h4><a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>take&lt;T&gt;</strong>(<span title="System.int">int</span> count, <a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> source)</h4>
		<div class="content">O(n), where n is count. Return the list which on consumption will consist of at most 'n' elements of
the input list. 



      
    </div>
	</div>
	<div id="toArray``1" class="method">
		<h4><span title="FSharpx.Collections.T[]">T[]</span> <strong>toArray&lt;T&gt;</strong>(<a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> s)</h4>
		<div class="content">O(n). Build an array from the given collection 



      
    </div>
	</div>
	<div id="toList``1" class="method">
		<h4><span title="Microsoft.FSharp.Collections.FSharpList<T>">FSharpList&lt;T&gt;</span> <strong>toList&lt;T&gt;</strong>(<a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> s)</h4>
		<div class="content">O(n). Build a non-lazy list from the given collection. This function will eagerly evaluate all of the
list (and thus may not terminate). 



      
    </div>
	</div>
	<div id="toSeq``1" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> <strong>toSeq&lt;T&gt;</strong>(<a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> s)</h4>
		<div class="content">O(n). Return a view of the collection as an enumerable object 



      
    </div>
	</div>
	<div id="tryFind``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.FSharpOption<T>">FSharpOption&lt;T&gt;</span> <strong>tryFind&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<T, bool>">FSharpFunc&lt;T, bool&gt;</span> predicate, <a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> source)</h4>
		<div class="content">O(n), worst case. Apply the given function to successive elements of the list, returning the first
result where function returns <c>Some(x)</c> for some x. If the function never returns
true, 'None' is returned. 



      
    </div>
	</div>
	<div id="tryHead``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.FSharpOption<T>">FSharpOption&lt;T&gt;</span> <strong>tryHead&lt;T&gt;</strong>(<a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> s)</h4>
		<div class="content">O(1). Return option the first element of the list.  Forces the evaluation of
the first cell of the list if it is not already evaluated. 



      
    </div>
	</div>
	<div id="trySkip``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.FSharpOption<LazyList<T>>">FSharpOption&lt;LazyList&lt;T&gt;&gt;</span> <strong>trySkip&lt;T&gt;</strong>(<span title="System.int">int</span> count, <a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> source)</h4>
		<div class="content">O(n), where n is count. Return option the list which skips the first 'n' elements of
the input list. 



      
    </div>
	</div>
	<div id="tryTail``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.FSharpOption<LazyList<T>>">FSharpOption&lt;LazyList&lt;T&gt;&gt;</span> <strong>tryTail&lt;T&gt;</strong>(<a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> s)</h4>
		<div class="content">O(1). Return option the list corresponding to the remaining items in the sequence.
Forces the evaluation of the first cell of the list if it is not already evaluated. 



      
    </div>
	</div>
	<div id="tryTake``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.FSharpOption<LazyList<T>>">FSharpOption&lt;LazyList&lt;T&gt;&gt;</span> <strong>tryTake&lt;T&gt;</strong>(<span title="System.int">int</span> count, <a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> source)</h4>
		<div class="content">O(n), where n is count. Return the list which on consumption will consist of at most 'n' elements of
the input list. 



      
    </div>
	</div>
	<div id="tryUncons``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.FSharpOption<Tuple<T, LazyList<T>>>">FSharpOption&lt;Tuple&lt;T, LazyList&lt;T&gt;&gt;&gt;</span> <strong>tryUncons&lt;T&gt;</strong>(<a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> s)</h4>
		<div class="content">O(1). Returns option tuple of head element and tail of the list. 



      
    </div>
	</div>
	<div id="uncons``1" class="method">
		<h4><span title="System.Tuple<T, LazyList<T>>">Tuple&lt;T, LazyList&lt;T&gt;&gt;</span> <strong>uncons&lt;T&gt;</strong>(<a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> s)</h4>
		<div class="content">O(1). Returns tuple of head element and tail of the list. 



      
    </div>
	</div>
	<div id="zip``2" class="method">
		<h4><a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>zip&lt;T1, T2&gt;</strong>(<a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> s1, <a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> s2)</h4>
		<div class="content">O(1). Return the list which contains on demand the pair of elements of the first and second list 



      
    </div>
	</div>
	
	<div id="footer">
  <p>Based on v1.8.3.0 of FSharpx</p>
  <p>Generated by <a href="http://docu.jagregory.com">docu</a></p>
</div>
  </body>
</html>