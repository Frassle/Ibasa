<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <title>Seq - FSharpx Documentation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
    <link type="text/css" rel="stylesheet" href="../main.css"/>
    <script type="text/javascript" src="../js/jquery-1.3.2.min.js"></script>
    <script type="text/javascript" src="../js/jquery.scrollTo-min.js"></script>
    <script type="text/javascript" src="../js/navigation.js"></script>
    <script type="text/javascript" src="../js/example.js"></script>
  </head>
  <body><div id="namespaces">
	<h2 class="fixed">Namespaces</h2>
	<div class="scroll">
		<ul>
			<li>
          <a href="../FSharp.Control/index.htm">FSharp.Control</a>
      </li>
			<li>
          <a href="../FSharp.IO/index.htm">FSharp.IO</a>
      </li>
			<li>
          <a href="../FSharpx/index.htm">FSharpx</a>
      </li>
			<li>
          <a href="../FSharpx.Collections/index.htm" class="current">FSharpx.Collections</a>
      </li>
			<li>
          <a href="../FSharpx.Collections.Mutable/index.htm">FSharpx.Collections.Mutable</a>
      </li>
			<li>
          <a href="../FSharpx.Core/index.htm">FSharpx.Core</a>
      </li>
			<li>
          <a href="../FSharpx.DataStructures/index.htm">FSharpx.DataStructures</a>
      </li>
			<li>
          <a href="../FSharpx.Linq/index.htm">FSharpx.Linq</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Collections/index.htm">Microsoft.FSharp.Collections</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Control/index.htm">Microsoft.FSharp.Control</a>
      </li>
		</ul>
	</div>
</div><div id="types">
  <h2 class="fixed">Types in FSharpx.Collections</h2>
	<div class="scroll">
		<ul>
				<li>
            <a href="../FSharpx.Collections/ArrayModule.htm">ArrayModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/ByteString.htm">ByteString</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/ByteStringModule.htm">ByteStringModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/Deque`1.htm">Deque&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/DequeModule.htm">DequeModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/DictionaryModule.htm">DictionaryModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/DList`1.htm">DList&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/DListModule.htm">DListModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/Heap`1.htm">Heap&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/HeapModule.htm">HeapModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/IPriorityQueue.htm">IPriorityQueue</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/IPriorityQueue`1.htm">IPriorityQueue`1</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/LazyListModule.htm">LazyListModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/List.htm">List</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/Map.htm">Map</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/NameValueCollectionModule.htm">NameValueCollectionModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/NonEmptyList.htm">NonEmptyList</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/NonEmptyList`1.htm">NonEmptyList&lt;a&gt;</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/NonEmptyListSemigroup`1.htm">NonEmptyListSemigroup`1</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/PriorityQueue.htm">PriorityQueue</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/Queue`1.htm">Queue&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/QueueModule.htm">QueueModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/RandomAccessList`1.htm">RandomAccessList&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/RandomAccessListModule.htm">RandomAccessListModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/Seq.htm" class="current">Seq</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/Set.htm">Set</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/Vector`1.htm">Vector&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/VectorModule.htm">VectorModule</a>
        </li>
		</ul>
	</div>
</div>
    <div class="header">
		<p class="class"><strong>Type</strong> Seq</p>
		<p><strong>Namespace</strong> FSharpx.Collections</p>
	</div>
    <div class="sub-header">
		
		
			<h3 class="section">Methods</h3>
			<ul>
				<li><a href="../FSharpx.Collections/Seq.htm#asCircular``1">asCircular&lt;a&gt;</a></li>
				<li><a href="../FSharpx.Collections/Seq.htm#asCircularOnLoop``1">asCircularOnLoop&lt;a&gt;</a></li>
				<li><a href="../FSharpx.Collections/Seq.htm#asCircularWithBreak``1">asCircularWithBreak&lt;a&gt;</a></li>
				<li><a href="../FSharpx.Collections/Seq.htm#combine``3">combine&lt;a, b, c&gt;</a></li>
				<li><a href="../FSharpx.Collections/Seq.htm#contract``1">contract&lt;a&gt;</a></li>
				<li><a href="../FSharpx.Collections/Seq.htm#grow``1">grow&lt;a&gt;</a></li>
				<li><a href="../FSharpx.Collections/Seq.htm#index``1">index&lt;a&gt;</a></li>
				<li><a href="../FSharpx.Collections/Seq.htm#iterBreak``1">iterBreak&lt;a&gt;</a></li>
				<li><a href="../FSharpx.Collections/Seq.htm#ofStreamByByte">ofStreamByByte</a></li>
				<li><a href="../FSharpx.Collections/Seq.htm#ofStreamByChunk">ofStreamByChunk</a></li>
				<li><a href="../FSharpx.Collections/Seq.htm#ofStreamReader">ofStreamReader</a></li>
				<li><a href="../FSharpx.Collections/Seq.htm#page``1">page&lt;a&gt;</a></li>
				<li><a href="../FSharpx.Collections/Seq.htm#repeat``1">repeat&lt;a&gt;</a></li>
				<li><a href="../FSharpx.Collections/Seq.htm#skipNoFail``1">skipNoFail&lt;a&gt;</a></li>
				<li><a href="../FSharpx.Collections/Seq.htm#splitAt``1">splitAt&lt;a&gt;</a></li>
				<li><a href="../FSharpx.Collections/Seq.htm#tail``1">tail&lt;a&gt;</a></li>
				<li><a href="../FSharpx.Collections/Seq.htm#tailNoFail``1">tailNoFail&lt;a&gt;</a></li>
				<li><a href="../FSharpx.Collections/Seq.htm#tryAverage``1">tryAverage&lt;a&gt;</a></li>
				<li><a href="../FSharpx.Collections/Seq.htm#tryFindWithIndex``1">tryFindWithIndex&lt;a&gt;</a></li>
				<li><a href="../FSharpx.Collections/Seq.htm#tryHead``1">tryHead&lt;a&gt;</a></li>
				<li><a href="../FSharpx.Collections/Seq.htm#tryNth``1">tryNth&lt;a&gt;</a></li>
			</ul>
		
		
	</div>
	
	
	
	<h3 class="section">Public static methods</h3>
	
	<div id="asCircular``1" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<a>">IEnumerable&lt;a&gt;</span> <strong>asCircular&lt;a&gt;</strong>(<span title="System.Collections.Generic.IEnumerable<a>">IEnumerable&lt;a&gt;</span> values)</h4>
		<div class="content">Creates a infinite sequences of the given values 



      
    </div>
	</div>
	<div id="asCircularOnLoop``1" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<a>">IEnumerable&lt;a&gt;</span> <strong>asCircularOnLoop&lt;a&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<Unit, Unit>">FSharpFunc&lt;Unit, Unit&gt;</span> f, <span title="System.Collections.Generic.IEnumerable<a>">IEnumerable&lt;a&gt;</span> values)</h4>
		<div class="content">Creates a infinite sequences of the given values, executing the given function everytime the given seq is exhausted 



      
    </div>
	</div>
	<div id="asCircularWithBreak``1" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<FSharpOption<a>>">IEnumerable&lt;FSharpOption&lt;a&gt;&gt;</span> <strong>asCircularWithBreak&lt;a&gt;</strong>(<span title="System.Collections.Generic.IEnumerable<a>">IEnumerable&lt;a&gt;</span> values)</h4>
		<div class="content">Creates a infinite sequences of the given values returning None everytime the given seq is exhausted 



      
    </div>
	</div>
	<div id="combine``3" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<c>">IEnumerable&lt;c&gt;</span> <strong>combine&lt;a, b, c&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<a, FSharpFunc<b, c>>">FSharpFunc&lt;a, FSharpFunc&lt;b, c&gt;&gt;</span> f, <span title="System.Collections.Generic.IEnumerable<a>">IEnumerable&lt;a&gt;</span> a, <span title="System.Collections.Generic.IEnumerable<b>">IEnumerable&lt;b&gt;</span> b)</h4>
		<div class="content">Creates a new collection whose elements are the results of applying the given function to the corresponding pairs of elements from the two sequences.
Unlike Seq.map2, if one input sequence is shorter than the other then the remaining elements of the longer sequence are not ignored, they are yielded at the end of the resulting sequence. 



      
    </div>
	</div>
	<div id="contract``1" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<a>">IEnumerable&lt;a&gt;</span> <strong>contract&lt;a&gt;</strong>(<span title="System.int">int</span> n, <span title="System.Collections.Generic.IEnumerable<a>">IEnumerable&lt;a&gt;</span> source)</h4>
		<div class="content">Contracts a seq selecting every n values 



      
    </div>
	</div>
	<div id="grow``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.FSharpFunc<IEnumerable<a>, IEnumerable<a>>">FSharpFunc&lt;IEnumerable&lt;a&gt;, IEnumerable&lt;a&gt;&gt;</span> <strong>grow&lt;a&gt;</strong>(<span title="System.int">int</span> n)</h4>
		<div class="content">Replicates each element in the seq n-times 



      
    </div>
	</div>
	<div id="index``1" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<Tuple<int, a>>">IEnumerable&lt;Tuple&lt;int, a&gt;&gt;</span> <strong>index&lt;a&gt;</strong>(<span title="System.Collections.Generic.IEnumerable<a>">IEnumerable&lt;a&gt;</span> a)</h4>
		<div class="content">Adds an index to a sequence 



      
    </div>
	</div>
	<div id="iterBreak``1" class="method">
		<h4><span title="System.void">void</span> <strong>iterBreak&lt;a&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<a, bool>">FSharpFunc&lt;a, bool&gt;</span> f, <span title="System.Collections.Generic.IEnumerable<a>">IEnumerable&lt;a&gt;</span> seq)</h4>
		<div class="content">Will iterate the current sequence until the given predicate is statisfied 



      
    </div>
	</div>
	<div id="ofStreamByByte" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> <strong>ofStreamByByte</strong>(<span title="System.IO.Stream">Stream</span> stream)</h4>
		<div class="content">Converts a Stream into a sequence of bytes 



      
    </div>
	</div>
	<div id="ofStreamByChunk" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<Byte[]>">IEnumerable&lt;Byte[]&gt;</span> <strong>ofStreamByChunk</strong>(<span title="System.int">int</span> chunkSize, <span title="System.IO.Stream">Stream</span> stream)</h4>
		<div class="content">Converts a stream into a seq of byte[] where the array is of the length given
Note: the last chunk maybe less than the given chunk size 



      
    </div>
	</div>
	<div id="ofStreamReader" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> <strong>ofStreamReader</strong>(<span title="System.IO.StreamReader">StreamReader</span> streamReader)</h4>
		<div class="content">Converts a streamReader into a seq yielding on each line 



      
    </div>
	</div>
	<div id="page``1" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<a>">IEnumerable&lt;a&gt;</span> <strong>page&lt;a&gt;</strong>(<span title="System.int">int</span> page, <span title="System.int">int</span> pageSize, <span title="System.Collections.Generic.IEnumerable<a>">IEnumerable&lt;a&gt;</span> source)</h4>
		<div class="content">Pages the underlying sequence 



      
    </div>
	</div>
	<div id="repeat``1" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<a>">IEnumerable&lt;a&gt;</span> <strong>repeat&lt;a&gt;</strong>(<span title="FSharpx.Collections.a">a</span> a)</h4>
		<div class="content">O(1). Return the list which on consumption will consist of an infinite sequence of
the given item 



      
    </div>
	</div>
	<div id="skipNoFail``1" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<a>">IEnumerable&lt;a&gt;</span> <strong>skipNoFail&lt;a&gt;</strong>(<span title="System.int">int</span> count, <span title="System.Collections.Generic.IEnumerable<a>">IEnumerable&lt;a&gt;</span> source)</h4>
		<div class="content">The same as Seq.skip except it returns empty if the sequence is empty or does not have enough elements.
Alias for Enumerable.Skip 



      
    </div>
	</div>
	<div id="splitAt``1" class="method">
		<h4><span title="System.Tuple<IEnumerable<a>, IEnumerable<a>>">Tuple&lt;IEnumerable&lt;a&gt;, IEnumerable&lt;a&gt;&gt;</span> <strong>splitAt&lt;a&gt;</strong>(<span title="System.int">int</span> n, <span title="System.Collections.Generic.IEnumerable<a>">IEnumerable&lt;a&gt;</span> seq)</h4>
		<div class="content">Splits a sequences at the given index 



      
    </div>
	</div>
	<div id="tail``1" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<a>">IEnumerable&lt;a&gt;</span> <strong>tail&lt;a&gt;</strong>(<span title="System.Collections.Generic.IEnumerable<a>">IEnumerable&lt;a&gt;</span> source)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="tailNoFail``1" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<a>">IEnumerable&lt;a&gt;</span> <strong>tailNoFail&lt;a&gt;</strong>(<span title="System.Collections.Generic.IEnumerable<a>">IEnumerable&lt;a&gt;</span> source)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="tryAverage``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.FSharpOption<a>">FSharpOption&lt;a&gt;</span> <strong>tryAverage&lt;a&gt;</strong>(<span title="System.Collections.Generic.IEnumerable<a>">IEnumerable&lt;a&gt;</span> seq)</h4>
		<div class="content">The same as Seq.average except will return None if the seq is empty 



      
    </div>
	</div>
	<div id="tryFindWithIndex``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.FSharpOption<Tuple<int, a>>">FSharpOption&lt;Tuple&lt;int, a&gt;&gt;</span> <strong>tryFindWithIndex&lt;a&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<a, bool>">FSharpFunc&lt;a, bool&gt;</span> pred, <span title="System.Collections.Generic.IEnumerable<a>">IEnumerable&lt;a&gt;</span> l)</h4>
		<div class="content">Returns the first element (with its index) for which the given function returns true.
Return None if no such element exists. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.FSharpFunc<a, bool>">FSharpFunc&lt;a, bool&gt;</span></code> pred</h6>
          <p class="comments">Predicate </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<a>">IEnumerable&lt;a&gt;</span></code> l</h6>
          <p class="comments">Sequence </p>
      </div>

      
    </div>
	</div>
	<div id="tryHead``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.FSharpOption<a>">FSharpOption&lt;a&gt;</span> <strong>tryHead&lt;a&gt;</strong>(<span title="System.Collections.Generic.IEnumerable<a>">IEnumerable&lt;a&gt;</span> source)</h4>
		<div class="content">A safe version of seq head 



      
    </div>
	</div>
	<div id="tryNth``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.FSharpOption<a>">FSharpOption&lt;a&gt;</span> <strong>tryNth&lt;a&gt;</strong>(<span title="System.int">int</span> index, <span title="System.Collections.Generic.IEnumerable<a>">IEnumerable&lt;a&gt;</span> source)</h4>
		<div class="content">The same as Seq.nth except returns None if the sequence is empty or does not have enough elements 



      
    </div>
	</div>
	
	<div id="footer">
  <p>Based on v1.8.3.0 of FSharpx</p>
  <p>Generated by <a href="http://docu.jagregory.com">docu</a></p>
</div>
  </body>
</html>