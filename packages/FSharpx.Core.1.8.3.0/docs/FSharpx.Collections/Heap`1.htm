<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <title>Heap&lt;T&gt; - FSharpx Documentation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
    <link type="text/css" rel="stylesheet" href="../main.css"/>
    <script type="text/javascript" src="../js/jquery-1.3.2.min.js"></script>
    <script type="text/javascript" src="../js/jquery.scrollTo-min.js"></script>
    <script type="text/javascript" src="../js/navigation.js"></script>
    <script type="text/javascript" src="../js/example.js"></script>
  </head>
  <body><div id="namespaces">
	<h2 class="fixed">Namespaces</h2>
	<div class="scroll">
		<ul>
			<li>
          <a href="../FSharp.Control/index.htm">FSharp.Control</a>
      </li>
			<li>
          <a href="../FSharp.IO/index.htm">FSharp.IO</a>
      </li>
			<li>
          <a href="../FSharpx/index.htm">FSharpx</a>
      </li>
			<li>
          <a href="../FSharpx.Collections/index.htm" class="current">FSharpx.Collections</a>
      </li>
			<li>
          <a href="../FSharpx.Collections.Mutable/index.htm">FSharpx.Collections.Mutable</a>
      </li>
			<li>
          <a href="../FSharpx.Core/index.htm">FSharpx.Core</a>
      </li>
			<li>
          <a href="../FSharpx.DataStructures/index.htm">FSharpx.DataStructures</a>
      </li>
			<li>
          <a href="../FSharpx.Linq/index.htm">FSharpx.Linq</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Collections/index.htm">Microsoft.FSharp.Collections</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Control/index.htm">Microsoft.FSharp.Control</a>
      </li>
		</ul>
	</div>
</div><div id="types">
  <h2 class="fixed">Types in FSharpx.Collections</h2>
	<div class="scroll">
		<ul>
				<li>
            <a href="../FSharpx.Collections/ArrayModule.htm">ArrayModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/ByteString.htm">ByteString</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/ByteStringModule.htm">ByteStringModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/Deque`1.htm">Deque&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/DequeModule.htm">DequeModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/DictionaryModule.htm">DictionaryModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/DList`1.htm">DList&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/DListModule.htm">DListModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/Heap`1.htm" class="current">Heap&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/HeapModule.htm">HeapModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/IPriorityQueue.htm">IPriorityQueue</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/IPriorityQueue`1.htm">IPriorityQueue`1</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/LazyListModule.htm">LazyListModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/List.htm">List</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/Map.htm">Map</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/NameValueCollectionModule.htm">NameValueCollectionModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/NonEmptyList.htm">NonEmptyList</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/NonEmptyList`1.htm">NonEmptyList&lt;a&gt;</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/NonEmptyListSemigroup`1.htm">NonEmptyListSemigroup`1</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/PriorityQueue.htm">PriorityQueue</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/Queue`1.htm">Queue&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/QueueModule.htm">QueueModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/RandomAccessList`1.htm">RandomAccessList&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/RandomAccessListModule.htm">RandomAccessListModule</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/Seq.htm">Seq</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/Set.htm">Set</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/Vector`1.htm">Vector&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharpx.Collections/VectorModule.htm">VectorModule</a>
        </li>
		</ul>
	</div>
</div>
    <div class="header">
		<p class="class"><strong>Type</strong> Heap&lt;T&gt;</p>
		<p><strong>Namespace</strong> FSharpx.Collections</p>
		<p><strong>Interfaces</strong> <a href="../FSharpx.Collections/IPriorityQueue`1.htm">IPriorityQueue`1</a></p>
	</div>
    <div class="sub-header">
			<div id="summary">Heap is an ordered linear structure where the ordering is either ascending or descending.
"head" inspects the first element in the ordering, "tail" takes the remaining structure
after head, and "insert" places elements within the ordering. PriorityQueue is available
as an alternate interface.
According to Okasaki the time complexity of the heap functions in this Heap implementation
(based on the "pairing" heap) have "resisted" time complexity analysis. 
			</div>
		
		
			<h3 class="section">Methods</h3>
			<ul>
				<li><a href="../FSharpx.Collections/Heap`1.htm#Insert">Insert</a></li>
				<li><a href="../FSharpx.Collections/Heap`1.htm#Merge">Merge</a></li>
				<li><a href="../FSharpx.Collections/Heap`1.htm#Rev">Rev</a></li>
				<li><a href="../FSharpx.Collections/Heap`1.htm#Tail">Tail</a></li>
				<li><a href="../FSharpx.Collections/Heap`1.htm#TryMerge">TryMerge</a></li>
				<li><a href="../FSharpx.Collections/Heap`1.htm#TryTail">TryTail</a></li>
				<li><a href="../FSharpx.Collections/Heap`1.htm#TryUncons">TryUncons</a></li>
				<li><a href="../FSharpx.Collections/Heap`1.htm#Uncons">Uncons</a></li>
			</ul>
		
			<h3 class="section">Properties</h3>
			<ul>
				<li><a href="../FSharpx.Collections/Heap`1.htm#Head">Head</a></li>
				<li><a href="../FSharpx.Collections/Heap`1.htm#IsDescending">IsDescending</a></li>
				<li><a href="../FSharpx.Collections/Heap`1.htm#IsEmpty">IsEmpty</a></li>
				<li><a href="../FSharpx.Collections/Heap`1.htm#Length">Length</a></li>
				<li><a href="../FSharpx.Collections/Heap`1.htm#TryHead">TryHead</a></li>
			</ul>
		
	</div>
	
	
	<h3 class="section">Public instance methods</h3>
	
	<div id="Insert" class="method">
		<h4><a href="../FSharpx.Collections/Heap`1.htm">Heap&lt;T&gt;</a> <strong>Insert</strong>(<span title="FSharpx.Collections.T">T</span> x)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="Merge" class="method">
		<h4><a href="../FSharpx.Collections/Heap`1.htm">Heap&lt;T&gt;</a> <strong>Merge</strong>(<a href="../FSharpx.Collections/Heap`1.htm">Heap&lt;T&gt;</a> xs)</h4>
		<div class="content">O(log n) amortized time. Returns heap from merging two heaps, both must have same descending. 



      
    </div>
	</div>
	<div id="Rev" class="method">
		<h4><a href="../FSharpx.Collections/Heap`1.htm">Heap&lt;T&gt;</a> <strong>Rev</strong>()</h4>
		<div class="content">O(n). Returns heap reversed. 



      
    </div>
	</div>
	<div id="Tail" class="method">
		<h4><a href="../FSharpx.Collections/Heap`1.htm">Heap&lt;T&gt;</a> <strong>Tail</strong>()</h4>
		<div class="content">O(log n) amortized time. Returns a new heap of the elements trailing the head. 



      
    </div>
	</div>
	<div id="TryMerge" class="method">
		<h4><span title="Microsoft.FSharp.Core.FSharpOption<Heap<T>>">FSharpOption&lt;Heap&lt;T&gt;&gt;</span> <strong>TryMerge</strong>(<a href="../FSharpx.Collections/Heap`1.htm">Heap&lt;T&gt;</a> xs)</h4>
		<div class="content">O(log n) amortized time. Returns heap option from merging two heaps. 



      
    </div>
	</div>
	<div id="TryTail" class="method">
		<h4><span title="Microsoft.FSharp.Core.FSharpOption<Heap<T>>">FSharpOption&lt;Heap&lt;T&gt;&gt;</span> <strong>TryTail</strong>()</h4>
		<div class="content">O(log n) amortized time. Returns option heap of the elements trailing the head. 



      
    </div>
	</div>
	<div id="TryUncons" class="method">
		<h4><span title="Microsoft.FSharp.Core.FSharpOption<Tuple<T, Heap<T>>>">FSharpOption&lt;Tuple&lt;T, Heap&lt;T&gt;&gt;&gt;</span> <strong>TryUncons</strong>()</h4>
		<div class="content">O(log n) amortized time. Returns option head element and tail. 



      
    </div>
	</div>
	<div id="Uncons" class="method">
		<h4><span title="System.Tuple<T, Heap<T>>">Tuple&lt;T, Heap&lt;T&gt;&gt;</span> <strong>Uncons</strong>()</h4>
		<div class="content">O(log n) amortized time. Returns the head element and tail. 



      
    </div>
	</div>
	
	
  <h3 class="section">Public properties</h3>

  <div id="Head" class="method">
    <h4><span title="FSharpx.Collections.T">T</span> <strong>Head</strong> get; </h4>
    <div class="content">O(1) worst case. Returns the min or max element. 
      
    </div>
  </div>
  <div id="IsDescending" class="method">
    <h4><span title="System.bool">bool</span> <strong>IsDescending</strong> get; </h4>
    <div class="content">O(1). Returns true if the heap has max element at head. 
      
    </div>
  </div>
  <div id="IsEmpty" class="method">
    <h4><span title="System.bool">bool</span> <strong>IsEmpty</strong> get; </h4>
    <div class="content">O(1). Returns true if the heap has no elements. 
      
    </div>
  </div>
  <div id="Length" class="method">
    <h4><span title="System.int">int</span> <strong>Length</strong> get; </h4>
    <div class="content">O(n). Returns the count of elememts. 
      
    </div>
  </div>
  <div id="TryHead" class="method">
    <h4><span title="Microsoft.FSharp.Core.FSharpOption<T>">FSharpOption&lt;T&gt;</span> <strong>TryHead</strong> get; </h4>
    <div class="content">O(1) worst case. Returns option first min or max element. 
      
    </div>
  </div>
	<div id="footer">
  <p>Based on v1.8.3.0 of FSharpx</p>
  <p>Generated by <a href="http://docu.jagregory.com">docu</a></p>
</div>
  </body>
</html>