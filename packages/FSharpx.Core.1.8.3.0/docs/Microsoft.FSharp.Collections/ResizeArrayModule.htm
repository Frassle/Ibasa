<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <title>ResizeArrayModule - FSharpx Documentation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
    <link type="text/css" rel="stylesheet" href="../main.css"/>
    <script type="text/javascript" src="../js/jquery-1.3.2.min.js"></script>
    <script type="text/javascript" src="../js/jquery.scrollTo-min.js"></script>
    <script type="text/javascript" src="../js/navigation.js"></script>
    <script type="text/javascript" src="../js/example.js"></script>
  </head>
  <body><div id="namespaces">
	<h2 class="fixed">Namespaces</h2>
	<div class="scroll">
		<ul>
			<li>
          <a href="../FSharp.Control/index.htm">FSharp.Control</a>
      </li>
			<li>
          <a href="../FSharp.IO/index.htm">FSharp.IO</a>
      </li>
			<li>
          <a href="../FSharpx/index.htm">FSharpx</a>
      </li>
			<li>
          <a href="../FSharpx.Collections/index.htm">FSharpx.Collections</a>
      </li>
			<li>
          <a href="../FSharpx.Collections.Mutable/index.htm">FSharpx.Collections.Mutable</a>
      </li>
			<li>
          <a href="../FSharpx.Core/index.htm">FSharpx.Core</a>
      </li>
			<li>
          <a href="../FSharpx.DataStructures/index.htm">FSharpx.DataStructures</a>
      </li>
			<li>
          <a href="../FSharpx.Linq/index.htm">FSharpx.Linq</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Collections/index.htm" class="current">Microsoft.FSharp.Collections</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Control/index.htm">Microsoft.FSharp.Control</a>
      </li>
		</ul>
	</div>
</div><div id="types">
  <h2 class="fixed">Types in Microsoft.FSharp.Collections</h2>
	<div class="scroll">
		<ul>
				<li>
            <a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm" class="current">ResizeArrayModule</a>
        </li>
		</ul>
	</div>
</div>
    <div class="header">
		<p class="class"><strong>Type</strong> ResizeArrayModule</p>
		<p><strong>Namespace</strong> Microsoft.FSharp.Collections</p>
	</div>
    <div class="sub-header">
			<div id="summary">Generic operations on the type System.Collections.Generic.List, which is called ResizeArray in the F# libraries. 
			</div>
		
		
			<h3 class="section">Methods</h3>
			<ul>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#append``1">append&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#blit``1">blit&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#choose``2">choose&lt;T, U&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#combine``2">combine&lt;T, U&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#copy``1">copy&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#create``1">create&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#exists``1">exists&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#exists2``2">exists2&lt;T, U&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#fill``1">fill&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#filter``1">filter&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#find``1">find&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#findIndex``1">findIndex&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#findIndexi``1">findIndexi&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#fold``2">fold&lt;T, U&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#fold2``3">fold2&lt;state, b1, b2&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#foldBack``2">foldBack&lt;T, U&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#foldBack2``3">foldBack2&lt;a1, a2, U&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#forall``1">forall&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#forall2``2">forall2&lt;T, U&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#get``1">get&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#isEmpty``1">isEmpty&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#iter``1">iter&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#iter2``2">iter2&lt;T, U&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#iteri``1">iteri&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#iteri2``2">iteri2&lt;T, U&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#length``1">length&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#map``2">map&lt;T, U&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#map2``3">map2&lt;T, U, c&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#mapi``2">mapi&lt;T, U&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#mapi2``3">mapi2&lt;T, U, c&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#of_list``1">of_list&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#ofArray``1">ofArray&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#partition``1">partition&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#reduce``1">reduce&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#reduceBack``1">reduceBack&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#rev``1">rev&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#scan``2">scan&lt;U, T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#scanBack``2">scanBack&lt;T, c&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#set``1">set&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#sort``1">sort&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#sortBy``2">sortBy&lt;T, Key&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#split``2">split&lt;T, U&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#sub``1">sub&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#to_list``1">to_list&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#to_seq``1">to_seq&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#toArray``1">toArray&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#toList``1">toList&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#toSeq``1">toSeq&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#tryFind``1">tryFind&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#tryFindIndex``1">tryFindIndex&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#tryFindIndexi``1">tryFindIndexi&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#tryPick``2">tryPick&lt;T, U&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#unzip``2">unzip&lt;T, U&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm#zip``2">zip&lt;T, U&gt;</a></li>
			</ul>
		
		
	</div>
	
	
	
	<h3 class="section">Public static methods</h3>
	
	<div id="append``1" class="method">
		<h4><span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> <strong>append&lt;T&gt;</strong>(<span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr1, <span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr2)</h4>
		<div class="content">Build a new array that contains the elements of the first array followed by the elements of the second array 



      
    </div>
	</div>
	<div id="blit``1" class="method">
		<h4><span title="System.void">void</span> <strong>blit&lt;T&gt;</strong>(<span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr1, <span title="System.int">int</span> start1, <span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr2, <span title="System.int">int</span> start2, <span title="System.int">int</span> len)</h4>
		<div class="content">Read a range of elements from the first array and write them into the second. 



      
    </div>
	</div>
	<div id="choose``2" class="method">
		<h4><span title="System.Collections.Generic.List<U>">List&lt;U&gt;</span> <strong>choose&lt;T, U&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<T, FSharpOption<U>>">FSharpFunc&lt;T, FSharpOption&lt;U&gt;&gt;</span> f, <span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr)</h4>
		<div class="content">Apply the given function to each element of the array. Return
the array comprised of the results "x" for each element where
the function returns Some(x) 



      
    </div>
	</div>
	<div id="combine``2" class="method">
		<h4><span title="System.Collections.Generic.List<Tuple<T, U>>">List&lt;Tuple&lt;T, U&gt;&gt;</span> <strong>combine&lt;T, U&gt;</strong>(<span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr1, <span title="System.Collections.Generic.List<U>">List&lt;U&gt;</span> arr2)</h4>
		<div class="content">Combine the two arrays into an array of pairs. The two arrays must have equal lengths. 



      
    </div>
	</div>
	<div id="copy``1" class="method">
		<h4><span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> <strong>copy&lt;T&gt;</strong>(<span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr)</h4>
		<div class="content">Build a new array that contains the elements of the given array 



      
    </div>
	</div>
	<div id="create``1" class="method">
		<h4><span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> <strong>create&lt;T&gt;</strong>(<span title="System.int">int</span> n, <span title="Microsoft.FSharp.Collections.T">T</span> x)</h4>
		<div class="content">Create an array whose elements are all initially the given value. 



      
    </div>
	</div>
	<div id="exists``1" class="method">
		<h4><span title="System.bool">bool</span> <strong>exists&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<T, bool>">FSharpFunc&lt;T, bool&gt;</span> f, <span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr)</h4>
		<div class="content">Test if any element of the array satisfies the given predicate.
If the input function is <c>f</c> and the elements are <c>i0...iN</c>
then computes <c>p i0 or... or p iN</c>. 



      
    </div>
	</div>
	<div id="exists2``2" class="method">
		<h4><span title="System.bool">bool</span> <strong>exists2&lt;T, U&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<T, FSharpFunc<U, bool>>">FSharpFunc&lt;T, FSharpFunc&lt;U, bool&gt;&gt;</span> f, <span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr1, <span title="System.Collections.Generic.List<U>">List&lt;U&gt;</span> arr2)</h4>
		<div class="content">Test elements of the two arrays pairwise to see if any pair of element satisfies the given predicate.
Raise ArgumentException if the arrays have different lengths. 



      
    </div>
	</div>
	<div id="fill``1" class="method">
		<h4><span title="System.void">void</span> <strong>fill&lt;T&gt;</strong>(<span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr, <span title="System.int">int</span> start, <span title="System.int">int</span> len, <span title="Microsoft.FSharp.Collections.T">T</span> x)</h4>
		<div class="content">Fill a range of the collection with the given element 



      
    </div>
	</div>
	<div id="filter``1" class="method">
		<h4><span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> <strong>filter&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<T, bool>">FSharpFunc&lt;T, bool&gt;</span> f, <span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr)</h4>
		<div class="content">Return a new collection containing only the elements of the collection
for which the given predicate returns <c>true</c> 



      
    </div>
	</div>
	<div id="find``1" class="method">
		<h4><span title="Microsoft.FSharp.Collections.T">T</span> <strong>find&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<T, bool>">FSharpFunc&lt;T, bool&gt;</span> f, <span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr)</h4>
		<div class="content">Return the first element for which the given function returns <c>true</c>.
Raise <c>KeyNotFoundException</c> if no such element exists. 



      
    </div>
	</div>
	<div id="findIndex``1" class="method">
		<h4><span title="System.int">int</span> <strong>findIndex&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<T, bool>">FSharpFunc&lt;T, bool&gt;</span> f, <span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr)</h4>
		<div class="content">Return the index of the first element in the array
that satisfies the given predicate. Raise <c>KeyNotFoundException</c> if
none of the elements satisfy the predicate. 



      
    </div>
	</div>
	<div id="findIndexi``1" class="method">
		<h4><span title="System.int">int</span> <strong>findIndexi&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<int, FSharpFunc<T, bool>>">FSharpFunc&lt;int, FSharpFunc&lt;T, bool&gt;&gt;</span> f, <span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr)</h4>
		<div class="content">Return the index of the first element in the array
that satisfies the given predicate. Raise <c>KeyNotFoundException</c> if
none of the elements satisfy the predicate. 



      
    </div>
	</div>
	<div id="fold``2" class="method">
		<h4><span title="Microsoft.FSharp.Collections.T">T</span> <strong>fold&lt;T, U&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<T, FSharpFunc<U, T>>">FSharpFunc&lt;T, FSharpFunc&lt;U, T&gt;&gt;</span> f, <span title="Microsoft.FSharp.Collections.T">T</span> acc, <span title="System.Collections.Generic.List<U>">List&lt;U&gt;</span> arr)</h4>
		<div class="content">Apply a function to each element of the collection, threading an accumulator argument
through the computation. If the input function is <c>f</c> and the elements are <c>i0...iN</c>
then computes <c>f (... (f s i0)...) iN</c> 



      
    </div>
	</div>
	<div id="fold2``3" class="method">
		<h4><span title="Microsoft.FSharp.Collections.state">state</span> <strong>fold2&lt;state, b1, b2&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<state, FSharpFunc<b1, FSharpFunc<b2, state>>>">FSharpFunc&lt;state, FSharpFunc&lt;b1, FSharpFunc&lt;b2, state&gt;&gt;&gt;</span> f, <span title="Microsoft.FSharp.Collections.state">state</span> acc, <span title="System.Collections.Generic.List<b1>">List&lt;b1&gt;</span> arr1, <span title="System.Collections.Generic.List<b2>">List&lt;b2&gt;</span> arr2)</h4>
		<div class="content">Apply a function to pairs of elements drawn from the two collections,
left-to-right, threading an accumulator argument
through the computation.  The two input
arrays must have the same lengths, otherwise an <c>ArgumentException</c> is
raised. 



      
    </div>
	</div>
	<div id="foldBack``2" class="method">
		<h4><span title="Microsoft.FSharp.Collections.U">U</span> <strong>foldBack&lt;T, U&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<T, FSharpFunc<U, U>>">FSharpFunc&lt;T, FSharpFunc&lt;U, U&gt;&gt;</span> f, <span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr, <span title="Microsoft.FSharp.Collections.U">U</span> acc)</h4>
		<div class="content">Apply a function to each element of the array, threading an accumulator argument
through the computation. If the input function is <c>f</c> and the elements are <c>i0...iN</c> then
computes <c>f i0 (...(f iN s))</c>. 



      
    </div>
	</div>
	<div id="foldBack2``3" class="method">
		<h4><span title="Microsoft.FSharp.Collections.U">U</span> <strong>foldBack2&lt;a1, a2, U&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<a1, FSharpFunc<a2, FSharpFunc<U, U>>>">FSharpFunc&lt;a1, FSharpFunc&lt;a2, FSharpFunc&lt;U, U&gt;&gt;&gt;</span> f, <span title="System.Collections.Generic.List<a1>">List&lt;a1&gt;</span> arr1, <span title="System.Collections.Generic.List<a2>">List&lt;a2&gt;</span> arr2, <span title="Microsoft.FSharp.Collections.U">U</span> acc)</h4>
		<div class="content">Apply a function to pairs of elements drawn from the two collections, right-to-left,
threading an accumulator argument through the computation.  The two input
arrays must have the same lengths, otherwise an <c>ArgumentException</c> is
raised. 



      
    </div>
	</div>
	<div id="forall``1" class="method">
		<h4><span title="System.bool">bool</span> <strong>forall&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<T, bool>">FSharpFunc&lt;T, bool&gt;</span> f, <span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr)</h4>
		<div class="content">Test if all elements of the array satisfy the given predicate.
If the input function is <c>f</c> and the elements are <c>i0...iN</c> and "j0...jN"
then computes <c>p i0 &&... && p iN</c>. 



      
    </div>
	</div>
	<div id="forall2``2" class="method">
		<h4><span title="System.bool">bool</span> <strong>forall2&lt;T, U&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<T, FSharpFunc<U, bool>>">FSharpFunc&lt;T, FSharpFunc&lt;U, bool&gt;&gt;</span> f, <span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr1, <span title="System.Collections.Generic.List<U>">List&lt;U&gt;</span> arr2)</h4>
		<div class="content">Test elements of the two arrays pairwise to see if all pairs of elements satisfy the given predicate.
Raise ArgumentException if the arrays have different lengths. 



      
    </div>
	</div>
	<div id="get``1" class="method">
		<h4><span title="Microsoft.FSharp.Collections.T">T</span> <strong>get&lt;T&gt;</strong>(<span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr, <span title="System.int">int</span> n)</h4>
		<div class="content">Fetch an element from the collection.  You can also use the syntax <c>arr.[idx]</c>. 



      
    </div>
	</div>
	<div id="isEmpty``1" class="method">
		<h4><span title="System.bool">bool</span> <strong>isEmpty&lt;T&gt;</strong>(<span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr)</h4>
		<div class="content">Return true if the given array is empty, otherwise false 



      
    </div>
	</div>
	<div id="iter``1" class="method">
		<h4><span title="System.void">void</span> <strong>iter&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<T, Unit>">FSharpFunc&lt;T, Unit&gt;</span> f, <span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr)</h4>
		<div class="content">Apply the given function to each element of the array. 



      
    </div>
	</div>
	<div id="iter2``2" class="method">
		<h4><span title="System.void">void</span> <strong>iter2&lt;T, U&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<T, FSharpFunc<U, Unit>>">FSharpFunc&lt;T, FSharpFunc&lt;U, Unit&gt;&gt;</span> f, <span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr1, <span title="System.Collections.Generic.List<U>">List&lt;U&gt;</span> arr2)</h4>
		<div class="content">Apply the given function to two arrays simultaneously. The
two arrays must have the same lengths, otherwise an Invalid_argument exception is
raised. 



      
    </div>
	</div>
	<div id="iteri``1" class="method">
		<h4><span title="System.void">void</span> <strong>iteri&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<int, FSharpFunc<T, Unit>>">FSharpFunc&lt;int, FSharpFunc&lt;T, Unit&gt;&gt;</span> f, <span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr)</h4>
		<div class="content">Apply the given function to each element of the array.  The integer passed to the
function indicates the index of element. 



      
    </div>
	</div>
	<div id="iteri2``2" class="method">
		<h4><span title="System.void">void</span> <strong>iteri2&lt;T, U&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<int, FSharpFunc<T, FSharpFunc<U, Unit>>>">FSharpFunc&lt;int, FSharpFunc&lt;T, FSharpFunc&lt;U, Unit&gt;&gt;&gt;</span> f, <span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr1, <span title="System.Collections.Generic.List<U>">List&lt;U&gt;</span> arr2)</h4>
		<div class="content">Apply the given function to pair of elements drawn from matching indices in two arrays,
also passing the index of the elements. The two arrays must have the same lengths,
otherwise an <c>ArgumentException</c> is raised. 



      
    </div>
	</div>
	<div id="length``1" class="method">
		<h4><span title="System.int">int</span> <strong>length&lt;T&gt;</strong>(<span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr)</h4>
		<div class="content">Return the length of the collection.  You can also use property <c>arr.Length</c>. 



      
    </div>
	</div>
	<div id="map``2" class="method">
		<h4><span title="System.Collections.Generic.List<U>">List&lt;U&gt;</span> <strong>map&lt;T, U&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<T, U>">FSharpFunc&lt;T, U&gt;</span> f, <span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr)</h4>
		<div class="content">Build a new array whose elements are the results of applying the given function
to each of the elements of the array. 



      
    </div>
	</div>
	<div id="map2``3" class="method">
		<h4><span title="System.Collections.Generic.List<c>">List&lt;c&gt;</span> <strong>map2&lt;T, U, c&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<T, FSharpFunc<U, c>>">FSharpFunc&lt;T, FSharpFunc&lt;U, c&gt;&gt;</span> f, <span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr1, <span title="System.Collections.Generic.List<U>">List&lt;U&gt;</span> arr2)</h4>
		<div class="content">Build a new collection whose elements are the results of applying the given function
to the corresponding elements of the two collections pairwise.  The two input
arrays must have the same lengths. 



      
    </div>
	</div>
	<div id="mapi``2" class="method">
		<h4><span title="System.Collections.Generic.List<U>">List&lt;U&gt;</span> <strong>mapi&lt;T, U&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<int, FSharpFunc<T, U>>">FSharpFunc&lt;int, FSharpFunc&lt;T, U&gt;&gt;</span> f, <span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr)</h4>
		<div class="content">Build a new array whose elements are the results of applying the given function
to each of the elements of the array. The integer index passed to the
function indicates the index of element being transformed. 



      
    </div>
	</div>
	<div id="mapi2``3" class="method">
		<h4><span title="System.Collections.Generic.List<c>">List&lt;c&gt;</span> <strong>mapi2&lt;T, U, c&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<int, FSharpFunc<T, FSharpFunc<U, c>>>">FSharpFunc&lt;int, FSharpFunc&lt;T, FSharpFunc&lt;U, c&gt;&gt;&gt;</span> f, <span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr1, <span title="System.Collections.Generic.List<U>">List&lt;U&gt;</span> arr2)</h4>
		<div class="content">Build a new collection whose elements are the results of applying the given function
to the corresponding elements of the two collections pairwise.  The two input
arrays must have the same lengths, otherwise an <c>ArgumentException</c> is
raised. 



      
    </div>
	</div>
	<div id="of_list``1" class="method">
		<h4><span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> <strong>of_list&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Collections.FSharpList<T>">FSharpList&lt;T&gt;</span> l)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="ofArray``1" class="method">
		<h4><span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> <strong>ofArray&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Collections.T[]">T[]</span> arr)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="partition``1" class="method">
		<h4><span title="System.Tuple<List<T>, List<T>>">Tuple&lt;List&lt;T&gt;, List&lt;T&gt;&gt;</span> <strong>partition&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<T, bool>">FSharpFunc&lt;T, bool&gt;</span> f, <span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr)</h4>
		<div class="content">Split the collection into two collections, containing the
elements for which the given predicate returns <c>true</c> and <c>false</c>
respectively 



      
    </div>
	</div>
	<div id="reduce``1" class="method">
		<h4><span title="Microsoft.FSharp.Collections.T">T</span> <strong>reduce&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<T, FSharpFunc<T, T>>">FSharpFunc&lt;T, FSharpFunc&lt;T, T&gt;&gt;</span> f, <span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr)</h4>
		<div class="content">Apply a function to each element of the array, threading an accumulator argument
through the computation. If the input function is <c>f</c> and the elements are <c>i0...iN</c>
then computes <c>f (... (f i0 i1)...) iN</c>. Raises ArgumentException if the array has size zero. 



      
    </div>
	</div>
	<div id="reduceBack``1" class="method">
		<h4><span title="Microsoft.FSharp.Collections.T">T</span> <strong>reduceBack&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<T, FSharpFunc<T, T>>">FSharpFunc&lt;T, FSharpFunc&lt;T, T&gt;&gt;</span> f, <span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr)</h4>
		<div class="content">Apply a function to each element of the array, threading an accumulator argument
through the computation. If the input function is <c>f</c> and the elements are <c>i0...iN</c> then
computes <c>f i0 (...(f iN-1 iN))</c>. Raises ArgumentException if the array has size zero. 



      
    </div>
	</div>
	<div id="rev``1" class="method">
		<h4><span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> <strong>rev&lt;T&gt;</strong>(<span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr)</h4>
		<div class="content">Return a new array with the elements in reverse order 



      
    </div>
	</div>
	<div id="scan``2" class="method">
		<h4><span title="System.Collections.Generic.List<U>">List&lt;U&gt;</span> <strong>scan&lt;U, T&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<U, FSharpFunc<T, U>>">FSharpFunc&lt;U, FSharpFunc&lt;T, U&gt;&gt;</span> f, <span title="Microsoft.FSharp.Collections.U">U</span> acc, <span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr)</h4>
		<div class="content">Like <c>fold</c>, but return the intermediary and final results 



      
    </div>
	</div>
	<div id="scanBack``2" class="method">
		<h4><span title="System.Collections.Generic.List<c>">List&lt;c&gt;</span> <strong>scanBack&lt;T, c&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<T, FSharpFunc<c, c>>">FSharpFunc&lt;T, FSharpFunc&lt;c, c&gt;&gt;</span> f, <span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr, <span title="Microsoft.FSharp.Collections.c">c</span> acc)</h4>
		<div class="content">Like <c>foldBack</c>, but return both the intermediary and final results 



      
    </div>
	</div>
	<div id="set``1" class="method">
		<h4><span title="System.void">void</span> <strong>set&lt;T&gt;</strong>(<span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr, <span title="System.int">int</span> n, <span title="Microsoft.FSharp.Collections.T">T</span> x)</h4>
		<div class="content">Set the value of an element in the collection. You can also use the syntax <c>arr.[idx] <- e</c>. 



      
    </div>
	</div>
	<div id="sort``1" class="method">
		<h4><span title="System.void">void</span> <strong>sort&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<T, FSharpFunc<T, int>>">FSharpFunc&lt;T, FSharpFunc&lt;T, int&gt;&gt;</span> f, <span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr)</h4>
		<div class="content">Sort the elements using the given comparison function 



      
    </div>
	</div>
	<div id="sortBy``2" class="method">
		<h4><span title="System.void">void</span> <strong>sortBy&lt;T, Key&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<T, Key>">FSharpFunc&lt;T, Key&gt;</span> f, <span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr)</h4>
		<div class="content">Sort the elements using the key extractor and generic comparison on the keys 



      
    </div>
	</div>
	<div id="split``2" class="method">
		<h4><span title="System.Tuple<List<T>, List<U>>">Tuple&lt;List&lt;T&gt;, List&lt;U&gt;&gt;</span> <strong>split&lt;T, U&gt;</strong>(<span title="System.Collections.Generic.List<Tuple<T, U>>">List&lt;Tuple&lt;T, U&gt;&gt;</span> arr)</h4>
		<div class="content">Split a list of pairs into two lists 



      
    </div>
	</div>
	<div id="sub``1" class="method">
		<h4><span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> <strong>sub&lt;T&gt;</strong>(<span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr, <span title="System.int">int</span> start, <span title="System.int">int</span> len)</h4>
		<div class="content">Build a new array that contains the given subrange specified by
starting index and length. 



      
    </div>
	</div>
	<div id="to_list``1" class="method">
		<h4><span title="Microsoft.FSharp.Collections.FSharpList<T>">FSharpList&lt;T&gt;</span> <strong>to_list&lt;T&gt;</strong>(<span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="to_seq``1" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> <strong>to_seq&lt;T&gt;</strong>(<span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="toArray``1" class="method">
		<h4><span title="Microsoft.FSharp.Collections.T[]">T[]</span> <strong>toArray&lt;T&gt;</strong>(<span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr)</h4>
		<div class="content">Return a fixed-length array containing the elements of the input ResizeArray 



      
    </div>
	</div>
	<div id="toList``1" class="method">
		<h4><span title="Microsoft.FSharp.Collections.FSharpList<T>">FSharpList&lt;T&gt;</span> <strong>toList&lt;T&gt;</strong>(<span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr)</h4>
		<div class="content">Build a list from the given array 



      
    </div>
	</div>
	<div id="toSeq``1" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> <strong>toSeq&lt;T&gt;</strong>(<span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr)</h4>
		<div class="content">Return a view of the array as an enumerable object 



      
    </div>
	</div>
	<div id="tryFind``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.FSharpOption<T>">FSharpOption&lt;T&gt;</span> <strong>tryFind&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<T, bool>">FSharpFunc&lt;T, bool&gt;</span> f, <span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr)</h4>
		<div class="content">Return the first element for which the given function returns <c>true</c>.
Return None if no such element exists. 



      
    </div>
	</div>
	<div id="tryFindIndex``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.FSharpOption<int>">FSharpOption&lt;int&gt;</span> <strong>tryFindIndex&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<T, bool>">FSharpFunc&lt;T, bool&gt;</span> f, <span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr)</h4>
		<div class="content">Return the index of the first element in the array
that satisfies the given predicate. 



      
    </div>
	</div>
	<div id="tryFindIndexi``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.FSharpOption<int>">FSharpOption&lt;int&gt;</span> <strong>tryFindIndexi&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<int, FSharpFunc<T, bool>>">FSharpFunc&lt;int, FSharpFunc&lt;T, bool&gt;&gt;</span> f, <span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr)</h4>
		<div class="content">Return the index of the first element in the array
that satisfies the given predicate. 



      
    </div>
	</div>
	<div id="tryPick``2" class="method">
		<h4><span title="Microsoft.FSharp.Core.FSharpOption<U>">FSharpOption&lt;U&gt;</span> <strong>tryPick&lt;T, U&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<T, FSharpOption<U>>">FSharpFunc&lt;T, FSharpOption&lt;U&gt;&gt;</span> f, <span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr)</h4>
		<div class="content">Apply the given function to successive elements, returning the first
result where function returns "Some(x)" for some x. 



      
    </div>
	</div>
	<div id="unzip``2" class="method">
		<h4><span title="System.Tuple<List<T>, List<U>>">Tuple&lt;List&lt;T&gt;, List&lt;U&gt;&gt;</span> <strong>unzip&lt;T, U&gt;</strong>(<span title="System.Collections.Generic.List<Tuple<T, U>>">List&lt;Tuple&lt;T, U&gt;&gt;</span> arr)</h4>
		<div class="content">Split an array of pairs into two arrays 



      
    </div>
	</div>
	<div id="zip``2" class="method">
		<h4><span title="System.Collections.Generic.List<Tuple<T, U>>">List&lt;Tuple&lt;T, U&gt;&gt;</span> <strong>zip&lt;T, U&gt;</strong>(<span title="System.Collections.Generic.List<T>">List&lt;T&gt;</span> arr1, <span title="System.Collections.Generic.List<U>">List&lt;U&gt;</span> arr2)</h4>
		<div class="content">Combine the two arrays into an array of pairs. The two arrays must have equal lengths, otherwise an <c>ArgumentException</c> is
raised.. 



      
    </div>
	</div>
	
	<div id="footer">
  <p>Based on v1.8.3.0 of FSharpx</p>
  <p>Generated by <a href="http://docu.jagregory.com">docu</a></p>
</div>
  </body>
</html>