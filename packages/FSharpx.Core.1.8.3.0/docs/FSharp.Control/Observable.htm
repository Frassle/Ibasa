<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <title>Observable - FSharpx Documentation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
    <link type="text/css" rel="stylesheet" href="../main.css"/>
    <script type="text/javascript" src="../js/jquery-1.3.2.min.js"></script>
    <script type="text/javascript" src="../js/jquery.scrollTo-min.js"></script>
    <script type="text/javascript" src="../js/navigation.js"></script>
    <script type="text/javascript" src="../js/example.js"></script>
  </head>
  <body><div id="namespaces">
	<h2 class="fixed">Namespaces</h2>
	<div class="scroll">
		<ul>
			<li>
          <a href="../FSharp.Control/index.htm" class="current">FSharp.Control</a>
      </li>
			<li>
          <a href="../FSharp.IO/index.htm">FSharp.IO</a>
      </li>
			<li>
          <a href="../FSharpx/index.htm">FSharpx</a>
      </li>
			<li>
          <a href="../FSharpx.Collections/index.htm">FSharpx.Collections</a>
      </li>
			<li>
          <a href="../FSharpx.Collections.Mutable/index.htm">FSharpx.Collections.Mutable</a>
      </li>
			<li>
          <a href="../FSharpx.Core/index.htm">FSharpx.Core</a>
      </li>
			<li>
          <a href="../FSharpx.DataStructures/index.htm">FSharpx.DataStructures</a>
      </li>
			<li>
          <a href="../FSharpx.Linq/index.htm">FSharpx.Linq</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Collections/index.htm">Microsoft.FSharp.Collections</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Control/index.htm">Microsoft.FSharp.Control</a>
      </li>
		</ul>
	</div>
</div><div id="types">
  <h2 class="fixed">Types in FSharp.Control</h2>
	<div class="scroll">
		<ul>
				<li>
            <a href="../FSharp.Control/AsyncExtensions.htm">AsyncExtensions</a>
        </li>
				<li>
            <a href="../FSharp.Control/AsyncSeq.htm">AsyncSeq</a>
        </li>
				<li>
            <a href="../FSharp.Control/AsyncSeqBuilder.htm">AsyncSeqBuilder</a>
        </li>
				<li>
            <a href="../FSharp.Control/AsyncSeqExtensions.htm">AsyncSeqExtensions</a>
        </li>
				<li>
            <a href="../FSharp.Control/AsyncSeqInner`1.htm">AsyncSeqInner&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharp.Control/AutoCancelAgent`1.htm">AutoCancelAgent&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharp.Control/BatchProcessingAgent`1.htm">BatchProcessingAgent&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharp.Control/BlockingQueueAgent`1.htm">BlockingQueueAgent&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharp.Control/CircularQueueAgent`1.htm">CircularQueueAgent&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharp.Control/ConcurrentSetAgent`1.htm">ConcurrentSetAgent&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharp.Control/ISubject`2.htm">ISubject&lt;TIn, TOut&gt;</a>
        </li>
				<li>
            <a href="../FSharp.Control/Observable.htm" class="current">Observable</a>
        </li>
				<li>
            <a href="../FSharp.Control/ObservableExtensions.htm">ObservableExtensions</a>
        </li>
				<li>
            <a href="../FSharp.Control/ObservableUpdate`1.htm">ObservableUpdate&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharp.Control/ReplaySubject`1.htm">ReplaySubject&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharp.Control/Seq.htm">Seq</a>
        </li>
				<li>
            <a href="../FSharp.Control/SlidingWindowAgent`1.htm">SlidingWindowAgent&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharp.Control/Subject`1.htm">Subject&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharp.Control/Tags.htm">Tags</a>
        </li>
		</ul>
	</div>
</div>
    <div class="header">
		<p class="class"><strong>Type</strong> Observable</p>
		<p><strong>Namespace</strong> FSharp.Control</p>
	</div>
    <div class="sub-header">
		
		
			<h3 class="section">Methods</h3>
			<ul>
				<li><a href="../FSharp.Control/Observable.htm#asUpdates``1">asUpdates&lt;T&gt;</a></li>
				<li><a href="../FSharp.Control/Observable.htm#Async.AwaitObservable.Static``1">Async.AwaitObservable.Static&lt;T1&gt;</a></li>
				<li><a href="../FSharp.Control/Observable.htm#Async.AwaitObservable.Static``2">Async.AwaitObservable.Static&lt;T1, T2&gt;</a></li>
				<li><a href="../FSharp.Control/Observable.htm#Async.AwaitObservable.Static``3">Async.AwaitObservable.Static&lt;T1, T2, T3&gt;</a></li>
				<li><a href="../FSharp.Control/Observable.htm#Async.AwaitObservable.Static``4">Async.AwaitObservable.Static&lt;T1, T2, T3, T4&gt;</a></li>
				<li><a href="../FSharp.Control/Observable.htm#Async.GuardedAwaitObservable.Static``1">Async.GuardedAwaitObservable.Static&lt;T1&gt;</a></li>
				<li><a href="../FSharp.Control/Observable.htm#bufferWithTimeOrCount``1">bufferWithTimeOrCount&lt;T&gt;</a></li>
				<li><a href="../FSharp.Control/Observable.htm#combineLatest``2">combineLatest&lt;TLeft, TRight&gt;</a></li>
				<li><a href="../FSharp.Control/Observable.htm#create``1">create&lt;a&gt;</a></li>
				<li><a href="../FSharp.Control/Observable.htm#createWithDisposable``1">createWithDisposable&lt;a&gt;</a></li>
				<li><a href="../FSharp.Control/Observable.htm#delay``1">delay&lt;a&gt;</a></li>
				<li><a href="../FSharp.Control/Observable.htm#error``1">error&lt;a&gt;</a></li>
				<li><a href="../FSharp.Control/Observable.htm#FromEvent``2">FromEvent&lt;TEventArgs, TDelegate&gt;</a></li>
				<li><a href="../FSharp.Control/Observable.htm#FromEventHandler``1">FromEventHandler&lt;TEventArgs&gt;</a></li>
				<li><a href="../FSharp.Control/Observable.htm#guard``1">guard&lt;Args&gt;</a></li>
				<li><a href="../FSharp.Control/Observable.htm#invoke``1">invoke&lt;a&gt;</a></li>
				<li><a href="../FSharp.Control/Observable.htm#LinkedList`1.popFront``1">LinkedList&lt;T&gt;</a></li>
				<li><a href="../FSharp.Control/Observable.htm#LinkedList`1.pushBack``1">LinkedList&lt;T&gt;</a></li>
				<li><a href="../FSharp.Control/Observable.htm#mapi``2">mapi&lt;TSource, TResult&gt;</a></li>
				<li><a href="../FSharp.Control/Observable.htm#result``1">result&lt;a&gt;</a></li>
				<li><a href="../FSharp.Control/Observable.htm#synchronize``1">synchronize&lt;a&gt;</a></li>
				<li><a href="../FSharp.Control/Observable.htm#takeWhile``1">takeWhile&lt;TSource&gt;</a></li>
				<li><a href="../FSharp.Control/Observable.htm#throttle``1">throttle&lt;T&gt;</a></li>
				<li><a href="../FSharp.Control/Observable.htm#windowed``1">windowed&lt;T&gt;</a></li>
				<li><a href="../FSharp.Control/Observable.htm#zip``2">zip&lt;TLeft, TRight&gt;</a></li>
			</ul>
		
		
	</div>
	
	
	
	<h3 class="section">Public static methods</h3>
	
	<div id="asUpdates``1" class="method">
		<h4><span title="System.IObservable<ObservableUpdate<T>>">IObservable&lt;ObservableUpdate&lt;T&gt;&gt;</span> <strong>asUpdates&lt;T&gt;</strong>(<span title="System.IObservable<T>">IObservable&lt;T&gt;</span> input)</h4>
		<div class="content">Turns observable into an observable that only calls OnNext method of the
observer, but gives it a discriminated union that represents different
kinds of events (error, next, completed) 



      
    </div>
	</div>
	<div id="Async.AwaitObservable.Static``1" class="method">
		<h4><span title="Microsoft.FSharp.Control.FSharpAsync<T1>">FSharpAsync&lt;T1&gt;</span> <strong>Async.AwaitObservable.Static&lt;T1&gt;</strong>(<span title="System.IObservable<T1>">IObservable&lt;T1&gt;</span> ev1)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="Async.AwaitObservable.Static``2" class="method">
		<h4><span title="Microsoft.FSharp.Control.FSharpAsync<FSharpChoice<T1, T2>>">FSharpAsync&lt;FSharpChoice&lt;T1, T2&gt;&gt;</span> <strong>Async.AwaitObservable.Static&lt;T1, T2&gt;</strong>(<span title="System.IObservable<T1>">IObservable&lt;T1&gt;</span> ev1, <span title="System.IObservable<T2>">IObservable&lt;T2&gt;</span> ev2)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="Async.AwaitObservable.Static``3" class="method">
		<h4><span title="Microsoft.FSharp.Control.FSharpAsync<FSharpChoice<T1, T2, T3>>">FSharpAsync&lt;FSharpChoice&lt;T1, T2, T3&gt;&gt;</span> <strong>Async.AwaitObservable.Static&lt;T1, T2, T3&gt;</strong>(<span title="System.IObservable<T1>">IObservable&lt;T1&gt;</span> ev1, <span title="System.IObservable<T2>">IObservable&lt;T2&gt;</span> ev2, <span title="System.IObservable<T3>">IObservable&lt;T3&gt;</span> ev3)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="Async.AwaitObservable.Static``4" class="method">
		<h4><span title="Microsoft.FSharp.Control.FSharpAsync<FSharpChoice<T1, T2, T3, T4>>">FSharpAsync&lt;FSharpChoice&lt;T1, T2, T3, T4&gt;&gt;</span> <strong>Async.AwaitObservable.Static&lt;T1, T2, T3, T4&gt;</strong>(<span title="System.IObservable<T1>">IObservable&lt;T1&gt;</span> ev1, <span title="System.IObservable<T2>">IObservable&lt;T2&gt;</span> ev2, <span title="System.IObservable<T3>">IObservable&lt;T3&gt;</span> ev3, <span title="System.IObservable<T4>">IObservable&lt;T4&gt;</span> ev4)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="Async.GuardedAwaitObservable.Static``1" class="method">
		<h4><span title="Microsoft.FSharp.Control.FSharpAsync<T1>">FSharpAsync&lt;T1&gt;</span> <strong>Async.GuardedAwaitObservable.Static&lt;T1&gt;</strong>(<span title="System.IObservable<T1>">IObservable&lt;T1&gt;</span> ev1, <span title="Microsoft.FSharp.Core.FSharpFunc<Unit, Unit>">FSharpFunc&lt;Unit, Unit&gt;</span> guardFunction)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="bufferWithTimeOrCount``1" class="method">
		<h4><span title="System.IObservable<IEnumerable<T>>">IObservable&lt;IEnumerable&lt;T&gt;&gt;</span> <strong>bufferWithTimeOrCount&lt;T&gt;</strong>(<span title="System.TimeSpan">TimeSpan</span> timeSpan, <span title="System.int">int</span> count, <span title="System.IObservable<T>">IObservable&lt;T&gt;</span> source)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="combineLatest``2" class="method">
		<h4><span title="System.IObservable<Tuple<TLeft, TRight>>">IObservable&lt;Tuple&lt;TLeft, TRight&gt;&gt;</span> <strong>combineLatest&lt;TLeft, TRight&gt;</strong>(<span title="System.IObservable<TLeft>">IObservable&lt;TLeft&gt;</span> left, <span title="System.IObservable<TRight>">IObservable&lt;TRight&gt;</span> right)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="create``1" class="method">
		<h4><span title="System.IObservable<a>">IObservable&lt;a&gt;</span> <strong>create&lt;a&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<IObserver<a>, FSharpFunc<Unit, Unit>>">FSharpFunc&lt;IObserver&lt;a&gt;, FSharpFunc&lt;Unit, Unit&gt;&gt;</span> f)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="createWithDisposable``1" class="method">
		<h4><span title="System.IObservable<a>">IObservable&lt;a&gt;</span> <strong>createWithDisposable&lt;a&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<IObserver<a>, IDisposable>">FSharpFunc&lt;IObserver&lt;a&gt;, IDisposable&gt;</span> f)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="delay``1" class="method">
		<h4><span title="System.IObservable<a>">IObservable&lt;a&gt;</span> <strong>delay&lt;a&gt;</strong>(<span title="System.int">int</span> milliseconds, <span title="System.IObservable<a>">IObservable&lt;a&gt;</span> observable)</h4>
		<div class="content">Delay execution of Observer function 



      
    </div>
	</div>
	<div id="error``1" class="method">
		<h4><span title="System.IObservable<a>">IObservable&lt;a&gt;</span> <strong>error&lt;a&gt;</strong>(<span title="System.Exception">Exception</span> e)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="FromEvent``2" class="method">
		<h4><span title="System.IObservable<TEventArgs>">IObservable&lt;TEventArgs&gt;</span> <strong>FromEvent&lt;TEventArgs, TDelegate&gt;</strong>(<span title="System.Func<Action<TEventArgs>, TDelegate>">Func&lt;Action&lt;TEventArgs&gt;, TDelegate&gt;</span> conversion, <span title="System.Action<TDelegate>">Action&lt;TDelegate&gt;</span> addHandler, <span title="System.Action<TDelegate>">Action&lt;TDelegate&gt;</span> removeHandler)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="FromEventHandler``1" class="method">
		<h4><span title="System.IObservable<EventArgs>">IObservable&lt;EventArgs&gt;</span> <strong>FromEventHandler&lt;TEventArgs&gt;</strong>(<span title="System.Action<EventHandler<EventArgs>>">Action&lt;EventHandler&lt;EventArgs&gt;&gt;</span> addHandler, <span title="System.Action<EventHandler<EventArgs>>">Action&lt;EventHandler&lt;EventArgs&gt;&gt;</span> removeHandler)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="guard``1" class="method">
		<h4><span title="System.IObservable<Args>">IObservable&lt;Args&gt;</span> <strong>guard&lt;Args&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<Unit, Unit>">FSharpFunc&lt;Unit, Unit&gt;</span> f, <span title="System.IObservable<Args>">IObservable&lt;Args&gt;</span> e)</h4>
		<div class="content">Creates an observable that calls the specified function (each time)
after an observer is attached to the observable. This is useful to
make sure that events triggered by the function are handled. 



      
    </div>
	</div>
	<div id="invoke``1" class="method">
		<h4><span title="System.IObservable<a>">IObservable&lt;a&gt;</span> <strong>invoke&lt;a&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<FSharpFunc<Unit, Unit>, Unit>">FSharpFunc&lt;FSharpFunc&lt;Unit, Unit&gt;, Unit&gt;</span> f, <span title="System.IObservable<a>">IObservable&lt;a&gt;</span> w)</h4>
		<div class="content">Invoke Observer function through specified function 



      
    </div>
	</div>
	<div id="LinkedList`1.popFront``1" class="method">
		<h4><span title="FSharp.Control.T">T</span> <strong>LinkedList&lt;T&gt;</strong>(<span title="System.Collections.Generic.LinkedList<T>">LinkedList&lt;T&gt;</span> )</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="LinkedList`1.pushBack``1" class="method">
		<h4><span title="System.void">void</span> <strong>LinkedList&lt;T&gt;</strong>(<span title="System.Collections.Generic.LinkedList<T>">LinkedList&lt;T&gt;</span> xs, <span title="FSharp.Control.T">T</span> x)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="mapi``2" class="method">
		<h4><span title="System.IObservable<TResult>">IObservable&lt;TResult&gt;</span> <strong>mapi&lt;TSource, TResult&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<int, FSharpFunc<TSource, TResult>>">FSharpFunc&lt;int, FSharpFunc&lt;TSource, TResult&gt;&gt;</span> f, <span title="System.IObservable<TSource>">IObservable&lt;TSource&gt;</span> source)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="result``1" class="method">
		<h4><span title="System.IObservable<a>">IObservable&lt;a&gt;</span> <strong>result&lt;a&gt;</strong>(<span title="FSharp.Control.a">a</span> x)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="synchronize``1" class="method">
		<h4><span title="FSharp.Control.a">a</span> <strong>synchronize&lt;a&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<FSharpFunc<FSharpFunc<Unit, Unit>, Unit>, a>">FSharpFunc&lt;FSharpFunc&lt;FSharpFunc&lt;Unit, Unit&gt;, Unit&gt;, a&gt;</span> f)</h4>
		<div class="content">Helper that can be used for writing CPS-style code that resumes
on the same thread where the operation was started. 



      
    </div>
	</div>
	<div id="takeWhile``1" class="method">
		<h4><span title="System.IObservable<TSource>">IObservable&lt;TSource&gt;</span> <strong>takeWhile&lt;TSource&gt;</strong>(<span title="Microsoft.FSharp.Core.FSharpFunc<TSource, bool>">FSharpFunc&lt;TSource, bool&gt;</span> f, <span title="System.IObservable<TSource>">IObservable&lt;TSource&gt;</span> source)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="throttle``1" class="method">
		<h4><span title="System.IObservable<T>">IObservable&lt;T&gt;</span> <strong>throttle&lt;T&gt;</strong>(<span title="System.int">int</span> milliseconds, <span title="System.IObservable<T>">IObservable&lt;T&gt;</span> source)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="windowed``1" class="method">
		<h4><span title="System.IObservable<T[]>">IObservable&lt;T[]&gt;</span> <strong>windowed&lt;T&gt;</strong>(<span title="System.int">int</span> size, <span title="System.IObservable<T>">IObservable&lt;T&gt;</span> input)</h4>
		<div class="content">Returns an observable that yields sliding windows of
containing elements drawn from the input observable.
Each window is returned as a fresh array. 



      
    </div>
	</div>
	<div id="zip``2" class="method">
		<h4><span title="System.IObservable<Tuple<TLeft, TRight>>">IObservable&lt;Tuple&lt;TLeft, TRight&gt;&gt;</span> <strong>zip&lt;TLeft, TRight&gt;</strong>(<span title="System.IObservable<TLeft>">IObservable&lt;TLeft&gt;</span> left, <span title="System.IObservable<TRight>">IObservable&lt;TRight&gt;</span> right)</h4>
		<div class="content">



      
    </div>
	</div>
	
	<div id="footer">
  <p>Based on v1.8.3.0 of FSharpx</p>
  <p>Generated by <a href="http://docu.jagregory.com">docu</a></p>
</div>
  </body>
</html>